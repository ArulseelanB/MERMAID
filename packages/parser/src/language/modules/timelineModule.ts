import {
  DefaultSharedModuleContext,
  LangiumServices,
  LangiumSharedServices,
  Module,
  PartialLangiumServices,
  createDefaultModule,
  createDefaultSharedModule,
  inject,
} from 'langium';

import { MermaidLexer } from '../services/mermaidLexer.js';
import { TimelineValueConverter } from '../services/value-converters/index.js';
import { TimelineTokenBuilder } from '../services/token-builders/index.js';
import { MermaidGeneratedSharedModule, TimelineGeneratedModule } from '../generated/module.js';

/**
 * Declaration of `Timeline` services.
 */
export type TimelineAddedServices = {
  parser: {
    Lexer: MermaidLexer;
    TokenBuilder: TimelineTokenBuilder;
    ValueConverter: TimelineValueConverter;
  };
};

/**
 * Union of Langium default services and `Timeline` services.
 */
export type TimelineServices = LangiumServices & TimelineAddedServices;

/**
 * Dependency injection module that overrides Langium default services and
 * contributes the declared `Timeline` services.
 */
export const TimelineModule: Module<
  TimelineServices,
  PartialLangiumServices & TimelineAddedServices
> = {
  parser: {
    Lexer: (services) => new MermaidLexer(services),
    TokenBuilder: () => new TimelineTokenBuilder(),
    ValueConverter: () => new TimelineValueConverter(),
  },
};

/**
 * Create the full set of services required by Langium.
 *
 * First inject the shared services by merging two modules:
 *  - Langium default shared services
 *  - Services generated by langium-cli
 *
 * Then inject the language-specific services by merging three modules:
 *  - Langium default language-specific services
 *  - Services generated by langium-cli
 *  - Services specified in this file
 * @param context - Optional module context with the LSP connection
 * @returns An object wrapping the shared services and the language-specific services
 */
export function createTimelineServices(context: DefaultSharedModuleContext): {
  shared: LangiumSharedServices;
  Timeline: TimelineServices;
} {
  const shared = inject(createDefaultSharedModule(context), MermaidGeneratedSharedModule);
  const Timeline = inject(createDefaultModule({ shared }), TimelineGeneratedModule, TimelineModule);
  shared.ServiceRegistry.register(Timeline);
  return { shared, Timeline };
}
