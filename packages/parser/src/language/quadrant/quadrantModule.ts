import {
  type DefaultSharedModuleContext,
  type LangiumServices,
  type LangiumSharedServices,
  type Module,
  type PartialLangiumServices,
  createDefaultModule,
  createDefaultSharedModule,
  inject,
} from 'langium';

import { QuadrantValueConverter } from './quadrantValueConverter.js';
import { QuadrantTokenBuilder } from './quadrantTokenBuilder.js';
import { MermaidGeneratedSharedModule, QuadrantGeneratedModule } from '../generated/module.js';
import { CommonLexer } from '../common/commonLexer.js';

/**
 * Declaration of `Quadrant` services.
 */
export type QuadrantAddedServices = {
  parser: {
    Lexer: CommonLexer;
    TokenBuilder: QuadrantTokenBuilder;
    ValueConverter: QuadrantValueConverter;
  };
};

/**
 * Union of Langium default services and `Quadrant` services.
 */
export type QuadrantServices = LangiumServices & QuadrantAddedServices;

/**
 * Dependency injection module that overrides Langium default services and
 * contributes the declared `Quadrant` services.
 */
export const QuadrantModule: Module<
  QuadrantServices,
  PartialLangiumServices & QuadrantAddedServices
> = {
  parser: {
    Lexer: (services) => new CommonLexer(services),
    TokenBuilder: () => new QuadrantTokenBuilder(),
    ValueConverter: () => new QuadrantValueConverter(),
  },
};

/**
 * Create the full set of services required by Langium.
 *
 * First inject the shared services by merging two modules:
 *  - Langium default shared services
 *  - Services generated by langium-cli
 *
 * Then inject the language-specific services by merging three modules:
 *  - Langium default language-specific services
 *  - Services generated by langium-cli
 *  - Services specified in this file
 * @param context - Optional module context with the LSP connection
 * @returns An object wrapping the shared services and the language-specific services
 */
export function createQuadrantServices(context: DefaultSharedModuleContext): {
  shared: LangiumSharedServices;
  Quadrant: QuadrantServices;
} {
  const shared: LangiumSharedServices = inject(
    createDefaultSharedModule(context),
    MermaidGeneratedSharedModule
  );
  const Quadrant: QuadrantServices = inject(
    createDefaultModule({ shared }),
    QuadrantGeneratedModule,
    QuadrantModule
  );
  shared.ServiceRegistry.register(Quadrant);
  return { shared, Quadrant };
}
