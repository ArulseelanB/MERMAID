import {
  DefaultSharedModuleContext,
  LangiumServices,
  LangiumSharedServices,
  Module,
  PartialLangiumServices,
  createDefaultModule,
  createDefaultSharedModule,
  inject,
} from 'langium';

import { MindmapLexer } from './mindmapLexer.js';
import { MindmapValueConverter } from './mindmapValueConverter.js';
import { MindmapTokenBuilder } from './mindmapTokenBuilder.js';
import { MermaidGeneratedSharedModule, MindmapGeneratedModule } from '../generated/module.js';

/**
 * Declaration of `Mindmap` services.
 */
export type MindmapAddedServices = {
  parser: {
    Lexer: MindmapLexer;
    TokenBuilder: MindmapTokenBuilder;
    ValueConverter: MindmapValueConverter;
  };
};

/**
 * Union of Langium default services and `Mindmap` services.
 */
export type MindmapServices = LangiumServices & MindmapAddedServices;

/**
 * Dependency injection module that overrides Langium default services and
 * contributes the declared `Mindmap` services.
 */
export const MindmapModule: Module<MindmapServices, PartialLangiumServices & MindmapAddedServices> =
  {
    parser: {
      Lexer: (services) => new MindmapLexer(services),
      TokenBuilder: () => new MindmapTokenBuilder(),
      ValueConverter: () => new MindmapValueConverter(),
    },
  };

/**
 * Create the full set of services required by Langium.
 *
 * First inject the shared services by merging two modules:
 *  - Langium default shared services
 *  - Services generated by langium-cli
 *
 * Then inject the language-specific services by merging three modules:
 *  - Langium default language-specific services
 *  - Services generated by langium-cli
 *  - Services specified in this file
 * @param context - Optional module context with the LSP connection
 * @returns An object wrapping the shared services and the language-specific services
 */
export function createMindmapServices(context: DefaultSharedModuleContext): {
  shared: LangiumSharedServices;
  Mindmap: MindmapServices;
} {
  const shared: LangiumSharedServices = inject(
    createDefaultSharedModule(context),
    MermaidGeneratedSharedModule
  );
  const Mindmap: MindmapServices = inject(
    createDefaultModule({ shared }),
    MindmapGeneratedModule,
    MindmapModule
  );
  shared.ServiceRegistry.register(Mindmap);
  return { shared, Mindmap };
}
