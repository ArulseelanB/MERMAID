import {
  type DefaultSharedModuleContext,
  type LangiumServices,
  type LangiumSharedServices,
  type Module,
  type PartialLangiumServices,
  createDefaultModule,
  createDefaultSharedModule,
  inject,
} from 'langium';

import { JourneyValueConverter } from './journeyValueConverter.js';
import { JourneyTokenBuilder } from './journeyTokenBuilder.js';
import { MermaidGeneratedSharedModule, JourneyGeneratedModule } from '../generated/module.js';
import { CommonLexer } from '../common/commonLexer.js';

/**
 * Declaration of `Journey` services.
 */
export type JourneyAddedServices = {
  parser: {
    Lexer: CommonLexer;
    TokenBuilder: JourneyTokenBuilder;
    ValueConverter: JourneyValueConverter;
  };
};

/**
 * Union of Langium default services and `Journey` services.
 */
export type JourneyServices = LangiumServices & JourneyAddedServices;

/**
 * Dependency injection module that overrides Langium default services and
 * contributes the declared `Journey` services.
 */
export const JourneyModule: Module<JourneyServices, PartialLangiumServices & JourneyAddedServices> =
  {
    parser: {
      Lexer: (services) => new CommonLexer(services),
      TokenBuilder: () => new JourneyTokenBuilder(),
      ValueConverter: () => new JourneyValueConverter(),
    },
  };

/**
 * Create the full set of services required by Langium.
 *
 * First inject the shared services by merging two modules:
 *  - Langium default shared services
 *  - Services generated by langium-cli
 *
 * Then inject the language-specific services by merging three modules:
 *  - Langium default language-specific services
 *  - Services generated by langium-cli
 *  - Services specified in this file
 * @param context - Optional module context with the LSP connection
 * @returns An object wrapping the shared services and the language-specific services
 */
export function createJourneyServices(context: DefaultSharedModuleContext): {
  shared: LangiumSharedServices;
  Journey: JourneyServices;
} {
  const shared: LangiumSharedServices = inject(
    createDefaultSharedModule(context),
    MermaidGeneratedSharedModule
  );
  const Journey: JourneyServices = inject(
    createDefaultModule({ shared }),
    JourneyGeneratedModule,
    JourneyModule
  );
  shared.ServiceRegistry.register(Journey);
  return { shared, Journey };
}
