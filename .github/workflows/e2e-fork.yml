name: E2E - Forks

on:
  - pull_request

jobs:
  setup:
    if: github.event.pull_request.head.repo.full_name != github.repository
    runs-on: ubuntu-latest
    outputs:
      # will contain a json string with an array of n elements, each being a string of spec files delimited by ,
      test-chunks: ${{ steps['set-test-chunks'].outputs['test-chunks'] }}
      # json string with ids to use in the next job matrix depending on how many elements are in the above array, eg: [0,1]
      test-chunk-ids: ${{ steps['set-test-chunk-ids'].outputs['test-chunk-ids'] }}
    steps:
      - uses: actions/checkout@v2
      - id: set-test-chunks
        name: Set Chunks
        # get all spec files from the integration directory, group them to be at most 15 at a time and transform them to json
        run: echo "test-chunks=$(find cypress/integration -type f -name "*.spec.*" | xargs -n15 | tr ' ' ',' | jq -R . | jq -s -cM .)"  >> $GITHUB_OUTPUT
      - id: set-test-chunk-ids
        name: Set Chunk IDs
        # get the number of elements from the above array as an array of indexes
        run: echo "test-chunk-ids=$(echo $CHUNKS | jq -cM 'to_entries | map(.key)')" >> $GITHUB_OUTPUT
        env:
          CHUNKS: ${{ steps['set-test-chunks'].outputs['test-chunks'] }}

  tests:
    if: github.event.pull_request.head.repo.full_name != github.repository
    needs:
      - setup
    runs-on: ubuntu-latest
    name: test (chunk ${{ matrix.chunk }})
    strategy:
      matrix:
        # will be for eg chunk: [0,1]
        chunk: ${{ fromJson(needs.setup.outputs['test-chunk-ids']) }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - uses: pnpm/action-setup@v2
        # uses version from "packageManager" field in package.json

      - name: Setup Node.js 18.x
        uses: actions/setup-node@v3
        with:
          node-version: 18.x

      # Install NPM dependencies, cache them correctly
      # and run all Cypress tests
      - name: Cypress run
        uses: cypress-io/github-action@v4
        id: cypress
        with:
          start: pnpm run dev:coverage
          wait-on: 'http://localhost:9000'
          spec: ${{ fromJson(needs.setup.outputs['test-chunks'])[matrix.chunk] }}
        env:
          VITEST_COVERAGE: true
      - name: Upload Coverage to Codecov
        uses: codecov/codecov-action@v3
        if: steps.cypress.conclusion == 'success'
        with:
          files: coverage/cypress/lcov.info
          flags: e2e
          name: mermaid-codecov
          fail_ci_if_error: true
          verbose: true
      - name: Upload Artifacts
        uses: actions/upload-artifact@v3
        if: ${{ failure() && steps.cypress.conclusion == 'failure' }}
        with:
          name: error-snapshots
          path: cypress/snapshots/**/__diff_output__/*

  testsall:
    if: ${{ github.event.pull_request.head.repo.full_name != github.repository && always() }}
    runs-on: ubuntu-latest
    name: Tests All
    needs: tests
    steps:
      - name: Check tests matrix status
        if: ${{ needs.tests.result != 'success' }}
        run: exit 1
